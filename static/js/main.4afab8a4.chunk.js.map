{"version":3,"sources":["Form/styled.js","Form/index.js","Tasks/styled.js","Tasks/index.js","Buttons/styled.js","Buttons/index.js","Section/styled.js","Section/index.js","Header/index.js","Container/styled.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","form","Input","input","Button","button","Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","ref","value","placeholder","onChange","target","onClick","current","focus","List","ul","Item","li","hidden","css","Content","span","done","toggleDone","remove","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","id","content","div","Buttons","toggleHideDone","setAllDone","length","disabled","every","section","Header","header","Title","h2","Body","Section","title","body","extraHeaderContent","main","Container","children","className","App","setHideDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4afab8a4.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.form`\r\n    display: grid;\r\n    grid-template-columns: 1fr auto;\r\n    grid-gap: 20px;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Input = styled.input`\r\n    padding: 10px;\r\n    border: 1px solid #ddd;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 10px;\r\n    background-color: teal;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n    transition: 0.3s;\r\n\r\n    &:hover {\r\n        background-color: hsl(180, 100%, 30%);\r\n        transform: scale(1.1);\r\n    }\r\n\r\n    &:active {\r\n        background-color: hsl(180, 100%, 35%);\r\n    }\r\n`;","import { useRef, useState } from \"react\";\r\nimport { Wrapper, Input, Button } from \"./styled\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <Wrapper onSubmit={onFormSubmit}>\r\n            <Input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <Button onClick={focusInput}>Dodaj zadanie</Button>\r\n        </Wrapper>\r\n    )\r\n};\r\n\r\nexport default Form;\r\n","import styled, { css } from \"styled-components\";\r\n\r\nexport const List = styled.ul`\r\n    list-style: none;\r\n    margin: 0;\r\n    padding: 0;\r\n`;\r\n\r\nexport const Item = styled.li`\r\n    display: grid;\r\n    grid-template-columns: auto 1fr auto;\r\n    grid-gap: 10px;\r\n    align-items: center;\r\n    padding: 10px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    ${({ hidden }) => hidden && css`\r\n        display: none;\r\n    `}\r\n`;\r\n\r\nexport const Content = styled.span`\r\n    overflow-wrap: anywhere;\r\n\r\n    ${({ done }) => done && css`\r\n        text-decoration: line-through;\r\n    `}\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    padding: 0;\r\n    width: 30px;\r\n    height: 30px;\r\n    color: white;\r\n    border: none;\r\n    cursor: pointer;\r\n    transition: background 0.3s;\r\n\r\n    ${({ toggleDone }) => toggleDone && css`\r\n        background-color: hsl(120, 61%, 34%);\r\n\r\n        &:hover {\r\n            background-color: hsl(124, 64%, 39%);\r\n        }\r\n\r\n        &:active {\r\n            background-color: hsl(124, 64%, 44%);\r\n        }\r\n    `}\r\n\r\n    ${({ remove }) => remove && css`\r\n        background-color: hsl(348, 83%, 47%);\r\n\r\n        &:hover {\r\n            background-color: hsl(348, 83%, 52%);\r\n        }\r\n\r\n        &:active {\r\n            background-color: hsl(348, 83%, 57%);\r\n        }\r\n    `}\r\n`;","import { List, Item, Content, Button } from \"./styled\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <List>\r\n        {tasks.map(task => (\r\n            <Item key={task.id} hidden={task.done && hideDone}>\r\n                <Button toggleDone onClick={() => toggleTaskDone(task.id)}>\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </Button>\r\n                <Content done={task.done}>\r\n                    {task.content}\r\n                </Content>\r\n                <Button remove onClick={() => removeTask(task.id)}>\r\n                    &#128465;\r\n                </Button>\r\n            </Item>\r\n        ))}\r\n    </List>\r\n);\r\n\r\nexport default Tasks;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n    background: transparent;\r\n    color: teal;\r\n    border: none;\r\n    cursor: pointer;\r\n    margin: 0 0 0 20px;\r\n    transition: color 0.3s;\r\n\r\n    @media(max-width: 767px) {\r\n        flex-basis: 100%;\r\n        margin: 10px;\r\n    }\r\n\r\n    &:hover{\r\n        color: hsl(180, 100%, 35%);\r\n    }\r\n\r\n    &:disabled{\r\n        color: #ccc;\r\n        cursor: not-allowed;\r\n    }\r\n`;","import { Wrapper, Button } from \"./styled\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <Wrapper>\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <Button onClick={toggleHideDone}>\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </Button>\r\n                <Button\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                    onClick={setAllDone}\r\n                >\r\n                    Ukończ wszystkie\r\n                </Button>\r\n            </>\r\n        )}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Buttons;\r\n\r\n\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.section`\r\n    margin: 10px 0;\r\n    background: white;\r\n    box-shadow: 0 0 5px #ddd;\r\n`;\r\n\r\nexport const Header = styled.header`\r\n    display: grid;\r\n    grid-template-columns: auto auto;\r\n    grid-gap: 20px;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    padding: 20px;\r\n    border-bottom: 1px solid #ddd;\r\n\r\n    @media (max-width: 767px) {\r\n        grid-template-columns: 1fr;\r\n    }\r\n`;\r\n\r\nexport const Title = styled.h2`\r\n    font-size: 20px;\r\n    margin: 0;\r\n`;\r\n\r\nexport const Body = styled.div`\r\n    padding: 20px;\r\n`;","import { Wrapper, Header, Title, Body } from \"./styled\"\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <Wrapper>\r\n        <Header>\r\n            <Title>\r\n                {title}\r\n            </Title>\r\n            {extraHeaderContent}\r\n        </Header>\r\n        <Body>\r\n            {body}\r\n        </Body>\r\n    </Wrapper>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.main`\r\n    max-width: 900px;\r\n    padding: 20px;\r\n    margin: 0 auto;\r\n`;","import { Wrapper } from \"./styled\";\r\n\r\nconst Container = ({ children }) => (\r\n    <Wrapper className=\"container\">\r\n        {children}\r\n    </Wrapper>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem('tasks') || []));\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}