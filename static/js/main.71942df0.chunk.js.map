{"version":3,"sources":["Form/index.js","Tasks/index.js","Buttons/index.js","Section/index.js","Header/index.js","Container/index.js","App.js","reportWebVitals.js","index.js"],"names":["Form","addNewTask","useState","newTaskContent","setNewTaskContent","inputRef","useRef","className","onSubmit","event","preventDefault","trimmedNewTaskContent","trim","ref","value","placeholder","onChange","target","onClick","current","focus","Tasks","tasks","hideDone","removeTask","toggleTaskDone","map","task","done","id","content","Buttons","toggleHideDone","setAllDone","length","disabled","every","Section","title","body","extraHeaderContent","Header","Container","children","App","setHideDone","JSON","parse","localStorage","getItem","setTasks","useEffect","setItem","stringify","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71942df0.chunk.js","sourcesContent":["import { useRef, useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Form = ({ addNewTask }) => {\r\n    const [newTaskContent, setNewTaskContent] = useState(\"\");\r\n    const inputRef = useRef(null);\r\n\r\n    const focusInput = () => {\r\n        inputRef.current.focus();\r\n    };\r\n\r\n    const onFormSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        const trimmedNewTaskContent = newTaskContent.trim();\r\n\r\n        if (!trimmedNewTaskContent) {\r\n            return;\r\n        }\r\n        addNewTask(trimmedNewTaskContent);\r\n        setNewTaskContent(\"\");\r\n    };\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={onFormSubmit}>\r\n            <input\r\n                ref={inputRef}\r\n                value={newTaskContent}\r\n                className=\"form__input\"\r\n                placeholder=\"Co jest do zrobienia?\"\r\n                onChange={({ target }) => setNewTaskContent(target.value)}\r\n            />\r\n            <button className=\"form__button\" onClick={focusInput}>Dodaj zadanie</button>\r\n        </form>\r\n    )\r\n};\r\n\r\nexport default Form;\r\n","import \"./style.css\";\r\n\r\nconst Tasks = ({ tasks, hideDone, removeTask, toggleTaskDone }) => (\r\n    <ul className=\"tasks\">\r\n        {tasks.map(task => (\r\n            <li\r\n                key={task.id}\r\n                className=\r\n                {`tasks__item${task.done && hideDone ? \" tasks__item--hidden\" : \"\"}`}\r\n            >\r\n                <button\r\n                    className=\"tasks__button tasks__button--toggleDone\"\r\n                    onClick={() => toggleTaskDone(task.id)}\r\n                >\r\n                    {task.done ? \"✔\" : \"\"}\r\n                </button>\r\n                <span className=\r\n                    {`tasks__content${task.done ? \" tasks__content--done\" : \"\"}`}>\r\n                    {task.content}\r\n                </span>\r\n                <button\r\n                    className=\"tasks__button tasks__button--remove\"\r\n                    onClick={() => removeTask(task.id)}\r\n                >\r\n                    &#128465;\r\n                </button>\r\n            </li>\r\n        ))}\r\n    </ul>\r\n);\r\n\r\nexport default Tasks;","import \"./style.css\";\r\n\r\nconst Buttons = ({ tasks, hideDone, toggleHideDone, setAllDone }) => (\r\n    <div className=\"buttons\">\r\n        {tasks.length > 0 && (\r\n            <>\r\n                <button\r\n                    className=\"buttons__button\"\r\n                    onClick={toggleHideDone}\r\n                >\r\n                    {hideDone ? \"Pokaż\" : \"Ukryj\"} ukończone\r\n                </button>\r\n                <button\r\n                    className=\"buttons__button\"\r\n                    disabled={tasks.every(({ done }) => done)}\r\n                    onClick={setAllDone}\r\n                >\r\n                    Ukończ wszystkie\r\n                </button>\r\n            </>\r\n        )}\r\n    </div>\r\n);\r\n\r\nexport default Buttons;\r\n\r\n\r\n","import \"./style.css\";\r\n\r\nconst Section = ({ title, body, extraHeaderContent }) => (\r\n    <section className=\"section\">\r\n        <header className=\"section__header\">\r\n            <h2 className=\"section__title\">{title}</h2>\r\n            {extraHeaderContent}\r\n        </header>\r\n        <div className=\"section__body\">\r\n            {body}\r\n        </div>\r\n    </section>\r\n);\r\n\r\nexport default Section;","const Header = ({ title }) => (\r\n    <header>\r\n        <h1>{title}</h1>\r\n    </header>\r\n);\r\n\r\nexport default Header;","import \"./style.css\";\r\n\r\nconst Container = ({ children }) => (\r\n    <main className=\"container\">\r\n        {children}\r\n    </main>\r\n);\r\n\r\nexport default Container;","import Form from \"./Form\";\nimport Tasks from \"./Tasks\";\nimport Buttons from \"./Buttons\";\nimport Section from \"./Section\";\nimport Header from \"./Header\";\nimport Container from \"./Container\";\nimport { useEffect, useState } from \"react\";\n\nfunction App() {\n  const [hideDone, setHideDone] = useState(false);\n  const [tasks, setTasks] = useState(JSON.parse(localStorage.getItem('tasks') || []));\n\n  const toggleHideDone = () => {\n    setHideDone(hideDone => !hideDone);\n  };\n\n  const removeTask = (id) => {\n    setTasks(tasks => tasks.filter(task => task.id !== id));\n  };\n\n  const toggleTaskDone = (id) => {\n    setTasks(tasks => tasks.map(task => {\n      if (task.id === id) {\n        return { ...task, done: !task.done };\n      }\n      return task;\n    }));\n  };\n\n  const setAllDone = () => {\n    setTasks(tasks => tasks.map(task => ({\n      ...task,\n      done: true,\n    })));\n  };\n\n  const addNewTask = (content) => {\n    setTasks(tasks => [\n      ...tasks,\n      {\n        content,\n        done: false,\n        id: tasks.length ? tasks[tasks.length - 1].id + 1 : 1,\n      },\n    ]);\n  };\n\n  useEffect(() => {\n    localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n  }, [tasks]);\n\n  return (\n    <Container>\n      <Header title=\"Lista zadań\" />\n      <Section\n        title=\"Dodaj nowe zadanie\"\n        body={<Form addNewTask={addNewTask} />}\n      />\n      <Section\n        title=\"Lista zadań\"\n        body={\n          <Tasks\n            tasks={tasks}\n            hideDone={hideDone}\n            removeTask={removeTask}\n            toggleTaskDone={toggleTaskDone}\n          />\n        }\n        extraHeaderContent={\n          <Buttons\n            tasks={tasks}\n            hideDone={hideDone}\n            toggleHideDone={toggleHideDone}\n            setAllDone={setAllDone}\n          />\n        }\n      />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}